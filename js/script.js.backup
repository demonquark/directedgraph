var pagedata = {};

$(document).ready(function () {

    // Instatiate objects
    $("#slider").slider({ range: false });
    $("#controlgroup").controlgroup();
    pagedata.counter = 0;
    pagedata.sigmaGraph = initializeGraph();
    
    // Add interactivity
    $("#update-graph").click(updateGraph);

    // Execute on load
    setTimeout(updateCounter, 1000);

});

function updateCounter(resetcounter) {

    // increment the counter
    var counterText = $("#counter span").text();
    var counter = parseInt(counterText.substr(0, counterText.indexOf(" ")), 10);
    counter = (isNaN(counter) ? 0 : counter) + ((Math.random() < 0.4) ? Math.floor((Math.random() * 10)) : 0);
    console.log(counterText + ": (" + counter + ")" + pagedata.counter);

    if (resetcounter) {
        // reset the counter
        console.log("counter reset.");
        pagedata.counter += counter;
        counter = 0;
    } 

    // publish the updated counter
    $("#counter").empty();
    if (counter > 0) {
        $("#counter").append($('<span>').append(counter + " updates"));
    }

    // update again
    if (pagedata.counter + counter < 100) {
        setTimeout(updateCounter, 1000);
    }
}

function updateGraph() {

    // update the global counter variable
    updateCounter(true);

    $.ajax({
        url: 'data.json',
        dataType: 'json',
        success: processAjax,
        error: processAjax
    });
}

function processAjax(data) {
    console.log(data);
    if ("nodes" in data) {
        // load the graph
        console.log("ajax call successful");
        //s = new sigma({ graph: data, container: 'graph-container', settings: { defaultnodecolor: '#ec5148' } });
        //s.startForceAtlas2();
        //s.refresh();
//        forceGraph();


        // report the success
        $('#graph-msg-container p.success-text').show();
        $('#graph-msg-container p.invalid-text').hide();
        $('#graph-msg-container p.failure-text').hide();
        $('#graph-msg-container').removeClass('ui-state-error').addClass('ui-state-default');
        $('#graph-msg-container').show();

    } else if ("status" in data && data.status == 200) {
        console.log("ajax call successful, but could not parse json");

        // report the error
        $('#graph-msg-container p.success-text').hide();
        $('#graph-msg-container p.invalid-text').show();
        $('#graph-msg-container p.failure-text').hide();
        $('#graph-msg-container').removeClass('ui-state-default').addClass('ui-state-error');
        $('#graph-msg-container').show();
    } else {
        console.log("ajax call failed");

        // report the error
        $('#graph-msg-container p.success-text').hide();
        $('#graph-msg-container p.invalid-text').hide();
        $('#graph-msg-container p.failure-text').show();
        $('#graph-msg-container').removeClass('ui-state-default').addClass('ui-state-error');
        $('#graph-msg-container').show();
    }
}

function initializeGraph() {
    var i,
        s,
    o,
    N = 100,
    E = 100,
    C = 5,
    d = 0.5,
    cs = [],
    g = {
        nodes: [],
        edges: []
    };

    // Create colors 
    for (i = 0; i < C; i++)
        cs.push({
            id: i,
            nodes: [],
            color: '#' + (
              Math.floor(Math.random() * 16777215).toString(16) + '000000'
            ).substr(0, 6)
        });

    // Create the nodes (group them by color)
    for (i = 0; i < N; i++) {
        o = cs[(Math.random() * C) | 0];
        g.nodes.push({
            id: 'n' + i,
            label: 'Node' + i,
            x: 100 * Math.cos(2 * i * Math.PI / N),
            y: 100 * Math.sin(2 * i * Math.PI / N),
            size: (i == 0 ? 4 : 1),
            color: o.color
        });
        o.nodes.push('n' + i);
    }

    // create the edges (increased likelihood of connecting nodes with the same color
    for (i = 0; i < E; i++) {
        if (Math.random() < 1 - d)
            g.edges.push({
                id: 'e' + i,
                source: 'n' + ((Math.random() * N) | 0),
                target: 'n' + ((Math.random() * N) | 0)
            });
        else {
            o = cs[(Math.random() * C) | 0]
            g.edges.push({
                id: 'e' + i,
                source: o.nodes[(Math.random() * o.nodes.length) | 0],
                target: o.nodes[(Math.random() * o.nodes.length) | 0]
            });
        }
    }

    // Empty the graph is necessary
    $('#graph-container').empty();
    $('#graph-container').append($('<div />').attr('id', 'counter'));

    // create a new SigmaJS graph
    s = new sigma({
        graph: g,
        container: 'graph-container',
        settings: {
            drawEdges: true
        }
    });

    // Start the ForceAtlas2 algorithm:
    s.startForceAtlas2({ worker: true, barnesHutOptimize: false });
    setTimeout(function () {
        console.log("stopping force atlas.");
        s.killForceAtlas2();
    }, 10000);

}